{"$message_type":"diagnostic","message":"variable `TOML_CONTENT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":163,"byte_end":175,"line_start":6,"line_end":6,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let TOML_CONTENT = r#\"","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":163,"byte_end":175,"line_start":6,"line_end":6,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let TOML_CONTENT = r#\"","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":"toml_content","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TOML_CONTENT` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/config_tests.rs:6:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let TOML_CONTENT = r#\"\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `toml_content`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `PARSED` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":592,"byte_end":598,"line_start":24,"line_end":24,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let PARSED: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse valid config\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":592,"byte_end":598,"line_start":24,"line_end":24,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let PARSED: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse valid config\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"parsed","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PARSED` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/config_tests.rs:24:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let PARSED: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse valid config\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `parsed`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `TOML_CONTENT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":885,"byte_end":897,"line_start":32,"line_end":32,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let TOML_CONTENT = r#\"","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":885,"byte_end":897,"line_start":32,"line_end":32,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let TOML_CONTENT = r#\"","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":"toml_content","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TOML_CONTENT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/config_tests.rs:32:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let TOML_CONTENT = r#\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `toml_content`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CONFIG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":1289,"byte_end":1295,"line_start":50,"line_end":50,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":1289,"byte_end":1295,"line_start":50,"line_end":50,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CONFIG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/config_tests.rs:50:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `TOML_CONTENT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":1534,"byte_end":1546,"line_start":57,"line_end":57,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let TOML_CONTENT = r#\"","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":1534,"byte_end":1546,"line_start":57,"line_end":57,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let TOML_CONTENT = r#\"","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":"toml_content","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `TOML_CONTENT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/config_tests.rs:57:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let TOML_CONTENT = r#\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `toml_content`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `CONFIG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":1943,"byte_end":1949,"line_start":75,"line_end":75,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/config_tests.rs","byte_start":1943,"byte_end":1949,"line_start":75,"line_end":75,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CONFIG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/config_tests.rs:75:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let CONFIG: Config = toml::from_str(TOML_CONTENT).expect(\"Should parse\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":62,"byte_end":66,"line_start":3,"line_end":3,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":62,"byte_end":66,"line_start":3,"line_end":3,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:3:23\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `PREFIX` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":74,"byte_end":80,"line_start":3,"line_end":3,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":74,"byte_end":80,"line_start":3,"line_end":3,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":"prefix","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PREFIX` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:3:35\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `prefix`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `S` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":159,"byte_end":160,"line_start":4,"line_end":4,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    LINE.strip_prefix(PREFIX).and_then(|S| S.split_whitespace().next()).map_or_else(","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":159,"byte_end":160,"line_start":4,"line_end":4,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    LINE.strip_prefix(PREFIX).and_then(|S| S.split_whitespace().next()).map_or_else(","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"s","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `S` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:4:41\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    LINE.strip_prefix(PREFIX).and_then(|S| S.split_whitespace().next()).map_or_else(\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `VALUE_STR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":298,"byte_end":307,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"        |VALUE_STR| VALUE_STR.parse().map_err(|_| ServiceError::Config(format!(\"Failed to parse memory value: {VALUE_STR}\")))","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":298,"byte_end":307,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"        |VALUE_STR| VALUE_STR.parse().map_err(|_| ServiceError::Config(format!(\"Failed to parse memory value: {VALUE_STR}\")))","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":"value_str","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `VALUE_STR` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:6:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        |VALUE_STR| VALUE_STR.parse().map_err(|_| ServiceError::Config(format!(\"Failed to parse memory value: {VALUE_STR}\")))\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `value_str`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":477,"byte_end":481,"line_start":12,"line_end":12,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":477,"byte_end":481,"line_start":12,"line_end":12,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:12:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LINE = \"MemTotal:        8000000 kB\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RESULT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":523,"byte_end":529,"line_start":13,"line_end":13,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":523,"byte_end":529,"line_start":13,"line_end":13,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RESULT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let RESULT = parse_memory_value(LINE, \"MemTotal:\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":702,"byte_end":706,"line_start":20,"line_end":20,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        invalid kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":702,"byte_end":706,"line_start":20,"line_end":20,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        invalid kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:20:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LINE = \"MemTotal:        invalid kB\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RESULT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":748,"byte_end":754,"line_start":21,"line_end":21,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":748,"byte_end":754,"line_start":21,"line_end":21,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RESULT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:21:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let RESULT = parse_memory_value(LINE, \"MemTotal:\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":891,"byte_end":895,"line_start":27,"line_end":27,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"SomeOther:       8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":891,"byte_end":895,"line_start":27,"line_end":27,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"SomeOther:       8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:27:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LINE = \"SomeOther:       8000000 kB\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RESULT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":937,"byte_end":943,"line_start":28,"line_end":28,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_tests.rs","byte_start":937,"byte_end":943,"line_start":28,"line_end":28,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RESULT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_tests.rs:28:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let RESULT = parse_memory_value(LINE, \"MemTotal:\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":62,"byte_end":66,"line_start":3,"line_end":3,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":62,"byte_end":66,"line_start":3,"line_end":3,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:3:23\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `PREFIX` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":74,"byte_end":80,"line_start":3,"line_end":3,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":74,"byte_end":80,"line_start":3,"line_end":3,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"fn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":"prefix","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PREFIX` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:3:35\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn parse_memory_value(LINE: &str, PREFIX: &str) -> Result<u64, ServiceError> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `prefix`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `VALUE_STR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":298,"byte_end":307,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"        |VALUE_STR| VALUE_STR.parse().map_err(|_| ServiceError::Config(format!(\"Failed to parse memory value: {VALUE_STR}\")))","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":298,"byte_end":307,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"        |VALUE_STR| VALUE_STR.parse().map_err(|_| ServiceError::Config(format!(\"Failed to parse memory value: {VALUE_STR}\")))","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":"value_str","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `VALUE_STR` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:6:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        |VALUE_STR| VALUE_STR.parse().map_err(|_| ServiceError::Config(format!(\"Failed to parse memory value: {VALUE_STR}\")))\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `value_str`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":477,"byte_end":481,"line_start":12,"line_end":12,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":477,"byte_end":481,"line_start":12,"line_end":12,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:12:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LINE = \"MemTotal:        8000000 kB\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RESULT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":523,"byte_end":529,"line_start":13,"line_end":13,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":523,"byte_end":529,"line_start":13,"line_end":13,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RESULT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let RESULT = parse_memory_value(LINE, \"MemTotal:\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":702,"byte_end":706,"line_start":20,"line_end":20,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        invalid kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":702,"byte_end":706,"line_start":20,"line_end":20,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"MemTotal:        invalid kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:20:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LINE = \"MemTotal:        invalid kB\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RESULT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":748,"byte_end":754,"line_start":21,"line_end":21,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":748,"byte_end":754,"line_start":21,"line_end":21,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RESULT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:21:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let RESULT = parse_memory_value(LINE, \"MemTotal:\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `LINE` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":891,"byte_end":895,"line_start":27,"line_end":27,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"SomeOther:       8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":891,"byte_end":895,"line_start":27,"line_end":27,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let LINE = \"SomeOther:       8000000 kB\";","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"line","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `LINE` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:27:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let LINE = \"SomeOther:       8000000 kB\";\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `line`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `RESULT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":937,"byte_end":943,"line_start":28,"line_end":28,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/unit_tests/monitoring_unit_tests.rs","byte_start":937,"byte_end":943,"line_start":28,"line_end":28,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let RESULT = parse_memory_value(LINE, \"MemTotal:\");","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RESULT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/unit_tests/monitoring_unit_tests.rs:28:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let RESULT = parse_memory_value(LINE, \"MemTotal:\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"25 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 25 warnings emitted\u001b[0m\n\n"}
